<?xml version="1.0" encoding="UTF-8"?>
<!--suppress AntResolveInspection -->
<project name="PEPPOL-BIS" basedir="." default="compile">

    <property name="agent.name" value="Manual generated"/>
    <!-- build.number is a property set by the build server (TeamCity) -->
    <!--<property name="build.number" value="DEV"/>-->
    <tstamp>
        <format property="build.time" pattern="yyyyMMdd_HHmmss" locale="en,GB"/>
    </tstamp>
    <property name="version.number" value="3.5.0_RC1"/>
    <!-- Format of version.releaseDate must be yyyy-mm-dd -->
    <!--<property name="version.releaseDate" value="2015-09-15"/>-->

    <property name="sch.dir" value="../rules"/>
    <property name="target.dir" value="../target"/>
    <property name="target.xslt" value="${target.dir}/XSLT"/>
    <property name="test.output" value="${target.dir}/test-output_${version.number}.log"/>
    <property name="test.overview" value="${target.dir}/test-overview_${version.number}.html"/>
    <property name="test.overview.inner" value="${target.dir}/test-overview-inner.html"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="clean">
        <delete dir="../target"/>
    </target>

    <target name="init" depends="setBuildNumber.normal">
        <echo message="##teamcity[buildNumber '${local.build.number}']"/>
        <mkdir dir="${target.xslt}"/>
    </target>

    <!--<target name="injectVersionNumber">-->
        <!--<replaceregexp file="Build/iso_schematron_skeleton_oioubl.xsl"-->
                       <!--match="name=&#34;dateRelease&#34; select=&#34;.*?'&#34;"-->
                       <!--replace="name=&#34;dateRelease&#34; select=&#34;', ${version.releaseDate}, Version ${version.number}'&#34;"-->
                       <!--byline="true"/>-->
    <!--</target>-->

    <target name="compile" depends="clean, init">
        <foreach target="compileDocumentType" param="documentType">
            <path>
                <dirset dir="../rules">
                    <include name="*"/>
                </dirset>
            </path>
        </foreach>
    </target>

    <target name="compileDocumentType" depends="dir.check" if="dir.exists">
        <basename property="baseDocumentType" file="${documentType}"/>
        <!--<echo message="${documentType}"/>-->
        <foreach target="compileSchFile" param="schFile">
            <path>
                <fileset dir="${documentType}/Schematron/">
                    <include name="*.sch"/>
                    <include name="*/*.sch"/>
                    <exclude name="*/BIICORE*.sch"/>
                </fileset>
            </path>
        </foreach>
    </target>

    <target name="compileSchFile">
        <basename property="baseName" file="${schFile}" suffix=".sch"/>
        <echo message="##teamcity[compilationStarted compiler='${baseName}' flowId='12321']"/>

        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${schFile}"/>
            <arg value="-xsl:iso-schematron-xslt2/iso_dsdl_include.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step1.xsl"/>
            <!--<jvmarg line="-Xms1024m"/>-->
            <jvmarg line="-Xmx2048m"/>
        </java>

        <echo message="SCH: Staring step 2..."/>
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${target.xslt}/${baseName}.step1.xsl"/>
            <arg value="-xsl:iso-schematron-xslt2/iso_abstract_expand.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step2.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <echo message="SCH: Staring step 3..."/>
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${target.xslt}/${baseName}.step2.xsl"/>
            <!--<arg value="-xsl:iso-schematron-xslt2/iso_schematron_skeleton_for_saxon.xsl"/>-->
            <arg value="-xsl:iso-schematron-xslt2/iso_svrl_for_xslt2.xsl"/>
            <arg value="-o:${target.xslt}/${baseName}.step3.xsl"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

        <move file="${target.xslt}/${baseName}.step3.xsl" tofile="${target.xslt}/${baseName}.xsl"/>
        <delete file="${target.xslt}/${baseName}.step1.xsl"/>
        <delete file="${target.xslt}/${baseName}.step2.xsl"/>
        <echo message="##teamcity[compilationFinished compiler='${baseName}' flowId='12321']"/>
    </target>

    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${documentType}/Schematron" type="dir"/>
        </condition>
    </target>

    <target name="makeZip" depends="compile" description="Make ZIP for release">
        <!-- Make version-info file -->
        <echo message="VERSION INFORMATION${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="-------------------${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="This ZIP contains the official OpenPEPPOL Validation Artifacts (XSLT + SCH files) for BIS 2.0 documents.${line.separator}"
              file="${target.dir}/version-info.txt" append="true"/>
        <echo message="Version   : ${version.number}${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="Build time: ${build.time}${line.separator}" file="${target.dir}/version-info.txt" append="true"/>
        <echo message="GIT number: ${build.number}${line.separator}" file="${target.dir}/version-info.txt" append="true"/>

        <zip destfile="${target.dir}/BIS2.0-VA-V${local.build.number}.zip">
            <zipfileset dir="${target.xslt}" includes="BIIRULES-UBL*.xsl" prefix="XSLT"/>
            <zipfileset dir="${target.xslt}" includes="OPENPEPPOL-UBL*.xsl" prefix="XSLT"/>
            <!-- Core files has been move to seperate directory -->
            <zipfileset dir="${target.xslt}" includes="OPENPEPPOLCORE-UBL*.xsl" prefix="XSLTCore"/>
            <!-- excludes="**/BIICORE*.sch" from version 3.1 -->
            <zipfileset dir="${sch.dir}" includes="**/*.sch" excludes="**/BIICORE*.sch" prefix="SCH"/>
            <zipfileset dir="../release-notes">
                <include name="*V${version.number}.pdf"/>
                <include name="*V${version.number}.html"/>
            </zipfileset>
            <zipfileset dir="${target.dir}" includes="*.txt"/>
            <!-- ODS dir added for version 3.2 only (so far) -->
            <!--<zipfileset dir="../ODS" includes="*.*" prefix="ODS"/>-->
        </zip>
    </target>

    <target name="test" depends="init" description="Run all tests">
        <delete>
            <fileset dir="${target.dir}" includes="*.log"/>
            <fileset dir="${target.dir}" includes="schematron-*-output.xml"/>
        </delete>
        <delete file="${test.overview.inner}"/>

        <!-- For each test folder-->
        <foreach target="executeTest" param="testFile" inheritall="true">
            <path>
                <fileset dir="${sch.dir}" casesensitive="false">
                    <include name="**/Tests/T*-*.xml"/>
                    <!--<include name="**/T10-0030*.xml"/>-->
                    <exclude name="**/Tests/TB*.xml"/>
                </fileset>
            </path>
        </foreach>
        <delete file="${target.dir}/schematron-*-output.xml"/>

        <!-- Make test overview output -->
        <copy file="testOverview_template.html" tofile="${test.overview}" overwrite="true"/>
        <loadfile property="innerHtml" srcfile="${test.overview.inner}"/>
        <replaceregexp file="${test.overview}" match="#buildNumber#" replace="${local.build.number}" byline="true"/>
        <replaceregexp file="${test.overview}" match="#innerHTML#" replace="${innerHtml}" byline="true"/>
        <delete file="${test.overview.inner}"/>

        <!--Check if errors exists-->
        <fileset id="matches" file="${test.output}">
            <contains text="ERROR"/>
        </fileset>

        <!--<fail message="Found ERRORS in tests">-->
        <!--<condition>-->
        <!--<resourcecount when="greater" count="0" refid="matches"/>-->
        <!--</condition>-->
        <!--</fail>-->
    </target>

    <target name="parseTestFilePath">
        <script language="javascript">
            // Find DocumentType
            filePath = (project.getProperty('testFile') + "").replace(/\\/g, '/');
            <!--filePath = "rules/peppolbis-trdm001-2.0-order/Tests/T01xxxxx12-0001-valid.xml";-->
            documentStartPos = filePath.indexOf('/Tests/');
            // Extract T10 as: T + "01" from "rules/peppolbis-trdm001-2.0-order/Tests/T01-0001-valid.xml"
            docType = "T" + filePath.substring(documentStartPos+8, filePath.indexOf("-", documentStartPos));

            <!--echo = project.createTask("echo");-->
            <!--echo.setMessage("DEBUG: Current test file=" + filePath + " - identified as DocType: " + docType);-->
            <!--echo.perform( );-->

            project.setProperty('docType', docType);
        </script>
        <basename property="testFile.base" file="${testFile}"/>
    </target>

    <target name="executeTest" depends="parseTestFilePath, schematronValidateFile">
        <!--<echo message="FILE: ${testFile}"/>-->
        <loadfile property="testFile.content" srcfile="${testFile}"/>
        <loadfile property="validationOutput.BII" srcfile="${target.dir}/schematron-BIIRULES-output.xml"/>
		<if>
			<available file="${target.dir}/schematron-OPENPEPPOLCORE-output.xml"/>
			<then>
				<loadfile property="validationOutput.PEPPOLCORE" srcfile="${target.dir}/schematron-OPENPEPPOLCORE-output.xml"/>
			</then>
			<else>
				<property name="validationOutput.PEPPOLCORE" value=""/>
			</else>
		</if>
        <loadfile property="validationOutput.PEPPOL" srcfile="${target.dir}/schematron-OPENPEPPOL-output.xml"/>

        <script language="javascript"><![CDATA[

            mainHandler();

            function mainHandler() {
                // Parse test file for ERRORS and WARNINGS
                content = project.getProperty('testFile.content');
                commentStart = content.indexOf('<!--');
                if ( commentStart == -1 ) {
                    project.setProperty('test.result', "ERROR");
                    project.setProperty('test.errorCode', "Header comment section missing");
                    project.setProperty('test.reason', "No header comment section found in file");
                    return;
                }

                commentEnd = content.indexOf('-->');
                commentLineArray = content.substring(commentStart, commentEnd).split('\n');
                var headlineFound = false;

                // Find all Description lines (started by keyword "Description" or "Content")
                var description = "";
                headlineFound = false;
                for (i=0; commentLineArray.length > i; i++) {
                    if ( commentLineArray[i]!=null && (commentLineArray[i].trim().indexOf('Description')==0 || commentLineArray[i].trim().indexOf('Content')==0) ) {
                        headlineFound = true;
                        continue;
                    }
                    if ( headlineFound ) {
                        if ( commentLineArray[i]!=null && commentLineArray[i].trim().length() > 0  && commentLineArray[i].trim()!='None') {
                //echo = project.createTask("echo");
                //echo.setMessage("TEST..................................................... " + commentLineArray[i].trim().split(' '));
                //echo.perform( );
                            description = description + commentLineArray[i] + "<br>"
                        } else {
                            break;
                        }
                    }
                    project.setProperty('test.description', description);
                }

                // Find expected ERRORS/WARNINGS from the file header.
                var errorArr = findErrorWarningLines(commentLineArray, "Error");
                var warningArr = findErrorWarningLines(commentLineArray, "Warning");

                // Find actual ERRORS/WARNINGS in the 3 output files.
                validationOutput_BII = project.getProperty('validationOutput.BII');
                validationOutput_PEPPOL_CORE = project.getProperty('validationOutput.PEPPOLCORE');
                validationOutput_PEPPOL = project.getProperty('validationOutput.PEPPOL');
                var foundErrors = [];
                var foundWarnings = [];
                findIssuesInOutputFile(validationOutput_BII, foundErrors, foundWarnings);
                findIssuesInOutputFile(validationOutput_PEPPOL_CORE, foundErrors, foundWarnings);
                findIssuesInOutputFile(validationOutput_PEPPOL, foundErrors, foundWarnings);

                // Verify that expected Errors+Warnings exists in schematron output
                // As a start, we assume that everything is OK:
                project.setProperty('test.result', "OK");

                var escapeChars = ["[", "]", "'"];

                // Iterate through all found Errors and Warnings
                foundErrors = loopThroughExpectedArray(errorArr, foundErrors, 'Error');
                foundWarnings = loopThroughExpectedArray(warningArr, foundWarnings, 'Warning');

                // Test for no errors expected
                // Expected elements should match found elements, so foundArr should be empty now!
                handleUnexpectedIssues(foundErrors, "ERROR");
                handleUnexpectedIssues(foundWarnings, "WARNINGS");
             } // mainHandler

            function findErrorWarningLines(commentLineArray, headlineWord) {
                var outputArr = [];
                headlineFound = false;
                for (var i=0; commentLineArray.length > i; i++) {
                    if ( commentLineArray[i]!=null && commentLineArray[i].trim().indexOf(headlineWord)==0 ) {
                        headlineFound = true;
                        continue;
                    }
                    if ( headlineFound ) {
                        commentLine = (commentLineArray[i]==null) ? null : commentLineArray[i].trim();
                        if ( commentLine!=null && commentLine.length() > 0 && commentLine!='None' ) {
                            //echo = project.createTask("echo");
                            //echo.setMessage("TEST..................................................... " + commentLine);
                            //echo.perform( );
                            lineArr = commentLineArray[i].trim().split(' ');
                            if ( lineArr.length==3 && lineArr[1]=='x' ) {
                                var cnt = lineArr[2];
                                for (var j=0; cnt > j; j++) {
                                    outputArr.push(lineArr[0])
                                }
                            } else {
                                outputArr.push(lineArr[0])
                            }
                        } else {
                            break;
                        }
                    }
                }
                return outputArr;
            }

            function findIssuesInOutputFile(validationOutput, errorArr, warningArr) {
                var regex = /failed-assert test.*\n.*id=\"([^\"]+)\".*\n.*flag=\"(\w+)\"/g
                var issueNumbers = [];
                var issueTypes = [];
                var match = regex.exec(validationOutput);
                while (match != null) {
                    issueNumbers.push(match[1]);
                    issueTypes.push(match[2]);
                    match = regex.exec(validationOutput);
                }
                for (i=0; issueNumbers.length > i; i++) {
                    if ( issueTypes[i]=='warning' ) {
                        warningArr.push(''+issueNumbers[i]);
                    }
                    else {
                        errorArr.push(''+issueNumbers[i]);
                    }
                }
            }

            function loopThroughExpectedArray(expectedArr, foundArr, testType) {
                // if error state is set, then break.
                if ( project.getProperty('test.result')=="ERROR") {
                    return;
                }

                //echo = project.createTask("echo");
                //echo.setMessage("ErrorType=" + testType+" / expectedArr="+expectedArr.length + " / foundArr="+foundArr.length);
                //echo.perform();
                //for (i=0; foundArr.length > i; i++) {
                //    echo = project.createTask("echo");
                //    echo.setMessage("Found "+testType + " " + i + ": " + foundArr[i]);
                //    echo.perform();
                //}

                for (i=0; expectedArr.length > i; i++) {
                    // expectedArr[i] is not of type String, so force it to be!
                    foundIndex = foundArr.indexOf(''+expectedArr[i]);

                    //echo = project.createTask("echo");
                    //echo.setMessage(".............................................. Expected "+testType +" ["+i+"]: >" + expectedArr[i] + "< / foundIndex: " + foundIndex + " / " + Object.prototype.toString.call(''+expectedArr[i]));
                    //echo.perform();

                    // Fail-first strategy!
                    if ( foundIndex < 0 ) {
                        project.setProperty('test.result', "ERROR");
                        project.setProperty('test.errorCode', expectedArr[i]);
                        project.setProperty('test.reason', "Expected error/warning " + expectedArr[i] + " not found in schematron output");
                        break;
                    }

                    // Error found, so remove it from foundArr.
                    foundArr = removeFromArray(foundArr, foundIndex);
                }

                return foundArr;
            }


            function handleUnexpectedIssues(foundArr, issueType) {
                // if error state is set, then break.
                if ( project.getProperty('test.result')=="ERROR") {
                    return;
                }

                if ( foundArr.length>0 ) {
                    //echo = project.createTask("echo");
                    //echo.setMessage(".............................................. Found elements=" + foundArr.length + " / type=" + issueType);
                    //echo.perform();

                    var reason = foundArr.length + ' ' + issueType + '(S) found in schematron output (not expected in test-file): ';
                    for (i=0; foundArr.length > i; i++) {
                        reason = reason + foundArr[i];
                        if ( i < (foundArr.length-1) ) {
                            reason = reason + ', ';
                        }
                    }

                    project.setProperty('test.result', "ERROR");
                    project.setProperty('test.errorCode', "no errors");
                    project.setProperty('test.reason', reason);
                }
            }

            function removeFromArray(oldArr, removePos) {
                var newArr = [];
                for (var i=0; oldArr.length > i; i++) {
                    if ( i != removePos ) {
                        newArr.push(oldArr[i]);
                    }
                }
                return newArr;
            }

        ]]></script>
        <!--<echo message="${test.result}"/>-->
        <if>
            <equals arg1="${test.result}" arg2="ERROR"/>
            <then>
                <echo message="##teamcity[testFailed name='${test.name}' message='${test.reason}' flowId='12321']"/>

                <echo message="ERROR: Output from schematron validation of file ${testFile.base} - problem: ${test.reason}:${line.separator}"
                      file="${test.output}" append="true"/>
                <echo message="BIICORE:${line.separator}${validationOutput.BII}${line.separator}${line.separator}" file="${test.output}" append="true"/>
                <echo message="PEPPOLCORE:${line.separator}${validationOutput.PEPPOLCORE}${line.separator}" file="${test.output}" append="true"/>
                <echo message="PEPPOL:${line.separator}${validationOutput.PEPPOL}${line.separator}" file="${test.output}" append="true"/>
                <echo message="-------------------------------------------------------------------${line.separator}${line.separator}" file="${test.output}" append="true"/>
            </then>
        </if>

        <echo file="${test.overview.inner}" append="true"><![CDATA[
<tr>
<td>${testFile.base}</td>
<td>${test.description}</td>
<td class="status-${test.result}">${test.result}</td>
</tr>
]]>
        </echo>
        <echo message="##teamcity[testFinished name='${test.name}' flowId='12321']"/>
        <echo message="##teamcity[testSuiteFinished name='${docType}' flowId='12321']"/>
    </target>

    <target name="schematronValidateFile">
        <!--<property name="test.name" value="${docType}.${testFile.base}" environment=""/>-->
        <property name="test.name" value="${testFile.base}" environment=""/>

        <echo message="##teamcity[testSuiteStarted name='${docType}' flowId='12321']"/>
        <echo message="##teamcity[testStarted name='${test.name}' flowId='12321']"/>
        <!-- SAXON options: http://www.saxonica.com/documentation9.5/using-xsl/commandline.html -->
        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${testFile}"/>
            <arg value="-xsl:${target.xslt}/BIIRULES-UBL-${docType}.xsl"/>
            <arg value="-o:${target.dir}/schematron-BIIRULES-output.xml"/>
            <arg value="-warnings:silent"/>
            <jvmarg line="-Xmx2048m"/>
        </java>

		<if>
			<available file="${target.xslt}/OPENPEPPOLCORE-UBL-${docType}.xsl"/>
			<then>
				<java jar="Saxon-HE-9.5.1-8.jar"
					  fork="true"
					  failonerror="true"
					  maxmemory="2048m"
					  resultproperty="errorCode">
					<arg value="-s:${testFile}"/>
					<arg value="-xsl:${target.xslt}/OPENPEPPOLCORE-UBL-${docType}.xsl"/>
					<arg value="-o:${target.dir}/schematron-OPENPEPPOLCORE-output.xml"/>
					<arg value="-warnings:silent"/>
					<jvmarg line="-Xmx2048m"/>
				</java>
			</then>
		</if>

        <java jar="Saxon-HE-9.5.1-8.jar"
              fork="true"
              failonerror="true"
              maxmemory="2048m"
              resultproperty="errorCode">
            <arg value="-s:${testFile}"/>
            <arg value="-xsl:${target.xslt}/OPENPEPPOL-UBL-${docType}.xsl"/>
            <arg value="-o:${target.dir}/schematron-OPENPEPPOL-output.xml"/>
            <arg value="-warnings:silent"/>
            <jvmarg line="-Xmx2048m"/>
        </java>
    </target>

    <!-- build-all is intended for build server. -->
    <target name="build-all" depends="clean, compile, test, makeZip"/>
    <target name="release" depends="setBuildNumber.release, makeZip"/>

    <target name="setBuildNumber.release">
        <property name="local.build.number" value="${version.number}"/>
    </target>

    <target name="setBuildNumber.normal">
        <property name="local.build.number" value="${version.number}.${build.time}"/>
    </target>

</project>
